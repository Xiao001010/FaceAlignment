[Fri Apr 21 14:32:52 2023|main.py|INFO] Task: Cas_Stage1_Aug_Wing_lr0.5_B8
[Fri Apr 21 14:32:52 2023|main.py|INFO] Training cascade stage 1
[Fri Apr 21 14:32:52 2023|main.py|INFO] Using device: cuda
[Fri Apr 21 14:32:52 2023|main.py|INFO] Using config: config\Cas_Stage1_Aug_Wing\Cas_Stage1_Aug_Wing_lr0.5_B8.yaml
[Fri Apr 21 14:32:52 2023|main.py|INFO] Train path: data/training_images_full_train.npz
[Fri Apr 21 14:32:52 2023|main.py|INFO] Train path 2: data/training_images_subset.npz
[Fri Apr 21 14:32:52 2023|main.py|INFO] Test path: data/training_images_full_test.npz
[Fri Apr 21 14:32:52 2023|main.py|INFO] Train augment: True
[Fri Apr 21 14:32:52 2023|main.py|INFO] Learning rate: 0.5
[Fri Apr 21 14:32:52 2023|main.py|INFO] Batch size: 8
[Fri Apr 21 14:32:52 2023|main.py|INFO] Num epochs: 100
[Fri Apr 21 14:32:52 2023|main.py|INFO] Save model: True
[Fri Apr 21 14:32:52 2023|main.py|INFO] Loss: Wing
[Fri Apr 21 14:32:52 2023|main.py|INFO] Log path: logs/Cas_Stage1_Aug_Wing_lr0.5_B8/2023-04-21_14-32-52.log
[Fri Apr 21 14:32:52 2023|main.py|INFO] Writer path: runs/Cas_Stage1_Aug_Wing_lr0.5_B8/2023-04-21_14-32-52
[Fri Apr 21 14:32:52 2023|main.py|INFO] Model name: resnet18
[Fri Apr 21 14:32:52 2023|main.py|INFO] Num outputs: 10
[Fri Apr 21 14:32:52 2023|main.py|INFO] Pretrained: True
[Fri Apr 21 14:32:52 2023|main.py|INFO] Load model: False
[Fri Apr 21 14:32:52 2023|main.py|INFO] Load path: None
[Fri Apr 21 14:32:52 2023|main.py|INFO] Loading data...
[Fri Apr 21 14:32:52 2023|main.py|INFO] Load dataset for cascade stage 1
[Fri Apr 21 14:32:55 2023|main.py|INFO] Initializing network resnet18 with 10 outputs...
[Fri Apr 21 14:32:56 2023|main.py|INFO] Network: ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc): Linear(in_features=512, out_features=10, bias=True)
)
[Fri Apr 21 14:32:56 2023|main.py|INFO] Initializing loss and optimizer...
[Fri Apr 21 14:32:56 2023|main.py|INFO] Loss: Wing
[Fri Apr 21 14:32:56 2023|main.py|INFO] Optimizer: Adam
[Fri Apr 21 14:32:56 2023|main.py|INFO] Initializing tensorboard writer at: runs/Cas_Stage1_Aug_Wing_lr0.5_B8/2023-04-21_14-32-52
[Fri Apr 21 14:32:56 2023|main.py|INFO] Training network...
